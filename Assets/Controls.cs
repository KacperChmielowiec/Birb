//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Tactics"",
            ""id"": ""baf122e5-5bb9-4f45-9207-995df34eb523"",
            ""actions"": [
                {
                    ""name"": ""LBM"",
                    ""type"": ""Button"",
                    ""id"": ""2523bbb7-dc2b-4e0a-9449-072724504745"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RBM"",
                    ""type"": ""Button"",
                    ""id"": ""5622a890-6189-4ce9-a524-98bed21a3ea5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""05eb9e2f-28f4-432d-81d7-d74347d761e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ESC"",
                    ""type"": ""Button"",
                    ""id"": ""f872d0cc-916e-4771-b279-44a2426239fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f8b0c44f-08f9-46cf-8fff-3a657e72d67a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LBM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a132e44-52c8-4468-b574-dc9741271709"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RBM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05ebcb17-cb61-4b56-a74e-c68551f53479"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6832e487-38ab-4643-853b-e02cd98466a0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ESC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tactics
        m_Tactics = asset.FindActionMap("Tactics", throwIfNotFound: true);
        m_Tactics_LBM = m_Tactics.FindAction("LBM", throwIfNotFound: true);
        m_Tactics_RBM = m_Tactics.FindAction("RBM", throwIfNotFound: true);
        m_Tactics_Position = m_Tactics.FindAction("Position", throwIfNotFound: true);
        m_Tactics_ESC = m_Tactics.FindAction("ESC", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tactics
    private readonly InputActionMap m_Tactics;
    private List<ITacticsActions> m_TacticsActionsCallbackInterfaces = new List<ITacticsActions>();
    private readonly InputAction m_Tactics_LBM;
    private readonly InputAction m_Tactics_RBM;
    private readonly InputAction m_Tactics_Position;
    private readonly InputAction m_Tactics_ESC;
    public struct TacticsActions
    {
        private @Controls m_Wrapper;
        public TacticsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LBM => m_Wrapper.m_Tactics_LBM;
        public InputAction @RBM => m_Wrapper.m_Tactics_RBM;
        public InputAction @Position => m_Wrapper.m_Tactics_Position;
        public InputAction @ESC => m_Wrapper.m_Tactics_ESC;
        public InputActionMap Get() { return m_Wrapper.m_Tactics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TacticsActions set) { return set.Get(); }
        public void AddCallbacks(ITacticsActions instance)
        {
            if (instance == null || m_Wrapper.m_TacticsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TacticsActionsCallbackInterfaces.Add(instance);
            @LBM.started += instance.OnLBM;
            @LBM.performed += instance.OnLBM;
            @LBM.canceled += instance.OnLBM;
            @RBM.started += instance.OnRBM;
            @RBM.performed += instance.OnRBM;
            @RBM.canceled += instance.OnRBM;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @ESC.started += instance.OnESC;
            @ESC.performed += instance.OnESC;
            @ESC.canceled += instance.OnESC;
        }

        private void UnregisterCallbacks(ITacticsActions instance)
        {
            @LBM.started -= instance.OnLBM;
            @LBM.performed -= instance.OnLBM;
            @LBM.canceled -= instance.OnLBM;
            @RBM.started -= instance.OnRBM;
            @RBM.performed -= instance.OnRBM;
            @RBM.canceled -= instance.OnRBM;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @ESC.started -= instance.OnESC;
            @ESC.performed -= instance.OnESC;
            @ESC.canceled -= instance.OnESC;
        }

        public void RemoveCallbacks(ITacticsActions instance)
        {
            if (m_Wrapper.m_TacticsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITacticsActions instance)
        {
            foreach (var item in m_Wrapper.m_TacticsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TacticsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TacticsActions @Tactics => new TacticsActions(this);
    public interface ITacticsActions
    {
        void OnLBM(InputAction.CallbackContext context);
        void OnRBM(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnESC(InputAction.CallbackContext context);
    }
}
